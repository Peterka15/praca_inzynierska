openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0
  description: >-
    Copy and paste this into https://editor.swagger.io/ to see openapi in action.
    You can import it directly to the postman to get all requests at once.

    # How to register a new user?

    1. Login as admin

    2. Call the users POST endpoint with user name, email, role and unit

    3. Grab the setPassword URL from the response and send to the user

    4. User must call the setPassword URL to set their password

    5. User can log in


paths:
  /login:
    post:
      summary: Login user
      operationId: loginUser
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        200:
          description: User logged in successfully
        401:
          description: Unauthorized

  /setPassword/{uuid}:
    post:
      summary: >-
        Set password. Requires reset password token as UUID.
        You can acquire it via reset password or account creation.
        Password reset token is one-time use.
      operationId: setPassword
      tags:
        - Auth
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
              required:
                - password
      responses:
        204:
          description: Password set successfully

  /refresh:
    post:
      summary: Refresh token
      operationId: refreshToken
      tags:
        - Auth
      responses:
        200:
          description: Token refreshed successfully

  /logout:
    post:
      summary: Logout user
      operationId: logoutUser
      tags:
        - Auth
      responses:
        200:
          description: User logged out successfully

  /articles:
    get:
      summary: Get list of articles
      operationId: getArticles
      tags:
        - Articles
      responses:
        200:
          description: List of articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        500:
          description: Server error

    post:
      summary: Create a new article (requires authentication)
      operationId: createArticle
      tags:
        - Articles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                tags:
                  type: string
              required:
                - title
                - content
                - tags
      responses:
        201:
          description: Article created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Validation errors

  /articles/{id}:
    get:
      summary: Get a single article
      operationId: getArticleById
      tags:
        - Articles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Article found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        404:
          description: Article not found

    put:
      summary: Update an article (requires authentication)
      operationId: updateArticle
      tags:
        - Articles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                tags:
                  type: string
      responses:
        200:
          description: Article updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        404:
          description: Article not found

    delete:
      summary: Delete an article (requires authentication)
      operationId: deleteArticle
      tags:
        - Articles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Article deleted
        404:
          description: Article not found

  /inventory:
    get:
      summary: Get list of inventory items
      operationId: getInventory
      tags:
        - Inventory
      responses:
        200:
          description: List of inventory items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'
        500:
          description: Server error

    post:
      summary: Create a new inventory entry
      operationId: createInventory
      tags:
        - Inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                amount:
                  type: number
                category_id:
                  type: number
                unit_id:
                  type: number
                available:
                  type: boolean
              required:
                - name
                - amount
                - category_id
                - unit_id
                - available
      responses:
        201:
          description: Inventory entry created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        400:
          description: Validation errors

  /inventory/{id}:
    get:
      summary: Get a single inventory
      operationId: getInventoryById
      tags:
        - Inventory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Inventory entry found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        404:
          description: Inventory entry not found

    put:
      summary: Update an inventory
      operationId: updateInventory
      tags:
        - Inventory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                amount:
                  type: number
                category_id:
                  type: number
                unit_id:
                  type: number
                available:
                  type: boolean
      responses:
        200:
          description: Inventory entry updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        404:
          description: Inventory entry not found

    delete:
      summary: Delete an inventory entry
      operationId: deleteInventory
      tags:
        - Inventory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Inventory entry deleted
        404:
          description: Inventory entry not found

  /inventoryCategory:
    get:
      summary: Get list of inventory categories
      operationId: getCategory
      tags:
        - Inventory
      responses:
        200:
          description: List of inventory categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        500:
          description: Server error

    post:
      summary: Create a new inventory category
      operationId: createCategory
      tags:
        - Inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        201:
          description: Inventory category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Validation errors

  /inventoryCategory/{id}:
    get:
      summary: Get a single inventory category
      operationId: getInventoryById
      tags:
        - Inventory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Inventory category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        404:
          description: Inventory category not found

    put:
      summary: Update an inventory category
      operationId: updateCategory
      tags:
        - Inventory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: Inventory category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        404:
          description: Inventory category not found

    delete:
      summary: Delete an inventory category
      operationId: deleteCategory
      tags:
        - Inventory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Inventory category deleted
        404:
          description: Inventory category not found

  /management:
    get:
      summary: Get list of management records
      operationId: getManagement
      tags:
        - Management
      responses:
        200:
          description: List of management records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Management'
        500:
          description: Server error

    post:
      summary: Create a new management record
      operationId: createManagement
      tags:
        - Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                function:
                  type: string
                unit_id:
                  type: integer
              required:
                - name
                - function
                - unit_id
      responses:
        201:
          description: Management record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Management'
        400:
          description: Validation errors

  /management/{id}:
    get:
      summary: Get a single management record
      operationId: getManagementById
      tags:
        - Management
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Management record found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Management'
        404:
          description: Management record not found

    put:
      summary: Update a management record
      operationId: updateManagement
      tags:
        - Management
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                function:
                  type: string
                unit_id:
                  type: integer
      responses:
        200:
          description: Management record updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Management'
        404:
          description: Management record not found

    delete:
      summary: Delete a management record
      operationId: deleteManagement
      tags:
        - Management
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Management record deleted
        404:
          description: Management record not found

  /tags:
    get:
      summary: Get list of tags
      operationId: getTags
      tags:
        - Tags
      responses:
        200:
          description: List of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        500:
          description: Server error

    post:
      summary: Create a new tag (requires authentication)
      operationId: createTag
      tags:
        - Tags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        201:
          description: Tag created successfully
        400:
          description: Validation errors

  /tags/{id}:
    get:
      summary: Get a single tag with its articles
      operationId: getTagById
      tags:
        - Tags
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Tag found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagWithArticles'
        404:
          description: Tag not found

    put:
      summary: Update a tag (requires authentication)
      operationId: updateTag
      tags:
        - Tags
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: Tag updated
        404:
          description: Tag not found

    delete:
      summary: Delete a tag (requires authentication)
      operationId: deleteTag
      tags:
        - Tags
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Tag deleted
        404:
          description: Tag not found

  /comments:
    post:
      summary: Create a new comment
      operationId: createComment
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                author:
                  type: string
                content:
                  type: string
                article_id:
                  type: integer
              required:
                - author
                - content
                - article_id
      responses:
        201:
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: Validation errors

  /comments/{id}:
    put:
      summary: Update a comment (requires authentication)
      operationId: updateComment
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                author:
                  type: string
                content:
                  type: string
      responses:
        200:
          description: Comment updated
        404:
          description: Comment not found

  /files/{uuid}:
    get:
      summary: Download a file by UUID
      operationId: downloadFileByUuid
      tags:
        - Files
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: File download successful
        404:
          description: File not found

  /images/{uuid}:
    get:
      summary: Get an image by UUID
      operationId: getImageByUuid
      tags:
        - Images
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Image retrieved
        404:
          description: Image not found

  /roles:
    get:
      summary: Get list of roles
      operationId: getRoles
      tags:
        - Roles
      responses:
        200:
          description: List of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        500:
          description: Server error

  /units:
    get:
      summary: Get list of units
      operationId: getUnits
      tags:
        - Units
      responses:
        200:
          description: List of units
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
        500:
          description: Server error

  /users:
    get:
      summary: Get list of users (requires authentication)
      operationId: getUsers
      tags:
        - Users
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: Server error

    post:
      summary: >-
        Create an user (admin only).
        This will create a new user and return the setPassword url.
        User needs to set their password using this url.
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                unit_id:
                  type: integer
                role_id:
                  type: integer
      responses:
        200:
          description: User created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PasswordSetUrl'
        401:
          description: Not authorized
        404:
          description: User not found

  /users/{id}:
    get:
      summary: Get list of users (requires authentication)
      operationId: getUsers
      tags:
        - Users
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: Server error

    patch:
      summary: Update an user (requires authentication)
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                unit_id:
                  type: integer
                role_id:
                  type: integer
      responses:
        200:
          description: User updated
        401:
          description: Not authorized
        404:
          description: User not found

  /users/{id}/resetPassword:
    post:
      summary: Reset an user's password (admin only)
      operationId: resetUserPassword
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Password reset
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PasswordSetUrl'
        401:
          description: Not authorized
        404:
          description: User not found

  /profile:
    get:
      summary: Get the current authenticated user's profile
      operationId: getCurrentUserProfile
      tags:
        - Users
      responses:
        200:
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  schemas:
    Article:
      type: object
      properties:
        id:
          type: integer
        author:
          $ref: '#/components/schemas/User'
        title:
          type: string
        content:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageUrl'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Inventory:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        unit:
          $ref: '#/components/schemas/Unit'
        available:
          type: boolean

    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    Comment:
      type: object
      properties:
        id:
          type: integer
        article_id:
          type: integer
        author:
          type: string
        content:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    File:
      type: object
      properties:
        id:
          type: integer
        uuid:
          type: string
        user_id:
          type: integer
        name:
          type: string
        mime_type:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    FileUrl:
      type: object
      properties:
        url:
          type: string

    Image:
      type: object
      properties:
        id:
          type: integer
        article_id:
          type: integer
        uuid:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ImageUrl:
      type: object
      properties:
        url:
          type: string

    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    Tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    TagWithArticles:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'

    Unit:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    Management:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        function:
          type: string
        unit:
          $ref: '#/components/schemas/Unit'

    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        unit:
          $ref: '#/components/schemas/Unit'
        role:
          $ref: '#/components/schemas/Role'
        required_password_change:
          type: boolean

    PasswordSetUrl:
      type: object
      properties:
        set_password_url:
          type: string
